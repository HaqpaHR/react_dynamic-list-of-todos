{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["requestUserById","userId","fetch","then","user","json","TodoList","state","todos","selected","input","selectHandler","event","value","target","setState","inputHandler","a","loadedTodos","this","selectedUserId","props","selectedTodos","filter","todo","length","title","toLowerCase","includes","completed","className","type","onChange","name","map","classNames","checked","readOnly","onClick","onChangeUser","id","React","Component","CurrentUser","loadedUser","prevProps","phone","email","clearUserId","App","changeUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9be29b9c.chunk.js","sourcesContent":["const URL = 'https://mate.academy/students-api/todos';\nconst URL_USERS = 'https://mate.academy/students-api/users';\n\nexport function requestTodoList() {\n  return fetch(URL)\n    .then(todos => todos.json());\n}\n\nexport function requestUserById(userId: number) {\n  return fetch(`${URL_USERS}/${userId}`)\n    .then(user => user.json());\n}\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { Todo } from '../../react-app-env';\nimport { requestTodoList } from '../../api';\n\ntype Props = {\n  selectedUserId: number,\n  onChangeUser: (userId:number) => void,\n};\n\ninterface State {\n  todos: Todo[],\n  selected: string,\n  input: string,\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state:State = {\n    todos: [],\n    selected: 'all',\n    input: '',\n  };\n\n  async componentDidMount() {\n    const loadedTodos = await requestTodoList();\n\n    this.setState({\n      todos: loadedTodos,\n    });\n  }\n\n  selectHandler = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      selected: value,\n    });\n  };\n\n  inputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      input: event.target.value,\n    });\n  };\n\n  render() {\n    const { todos, selected, input } = this.state;\n    const { selectedUserId } = this.props;\n    const selectedTodos = todos.filter(todo => {\n      if (input.length > 0 && selected === 'all') {\n        // eslint-disable-next-line max-len\n        return todo.title.toLowerCase().includes(this.state.input.toLowerCase());\n      }\n\n      if (input.length > 0 && selected === 'completed') {\n        // eslint-disable-next-line max-len\n        return (todo.title.toLowerCase().includes(this.state.input.toLowerCase()) && todo.completed);\n      }\n\n      if (input.length > 0 && selected === 'active') {\n        // eslint-disable-next-line max-len\n        return (todo.title.toLowerCase().includes(this.state.input.toLowerCase()) && !todo.completed);\n      }\n\n      if (selected === 'completed') {\n        return todo.completed;\n      }\n\n      if (selected === 'active') {\n        return !todo.completed;\n      }\n\n      return todo;\n    });\n\n    return (\n      <div className=\"TodoList\">\n        <input\n          type=\"text\"\n          onChange={this.inputHandler}\n        />\n        <select\n          name=\"select\"\n          onChange={this.selectHandler}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"active\">Active</option>\n        </select>\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {selectedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item', {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  readOnly\n                />\n                <p>\n                  {todo.title}\n                </p>\n                <button\n                  type=\"button\"\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__item--checked': todo.userId === selectedUserId,\n                  })}\n                  onClick={() => this.props.onChangeUser(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { User } from '../../react-app-env';\nimport './CurrentUser.scss';\nimport { requestUserById } from '../../api';\n\ntype Props = {\n  userId: number,\n  clearUserId: () => void,\n};\n\ninterface State {\n  user: User,\n\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: {} as User,\n  };\n\n  async componentDidMount() {\n    const loadedUser = await requestUserById(this.props.userId);\n\n    this.setState({\n      user: loadedUser,\n    });\n  }\n\n  async componentDidUpdate(prevProps: Readonly<Props>) {\n    if (prevProps.userId !== this.props.userId) {\n      const loadedUser = await requestUserById(this.props.userId);\n\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        user: loadedUser,\n      });\n    }\n  }\n\n  render() {\n    const {\n      name,\n      phone,\n      id,\n      email,\n    } = this.state.user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${id}`}</span></h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          type=\"button\"\n          onClick={this.props.clearUserId}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  changeUser = (id: number) => {\n    if (this.state.selectedUserId !== id) {\n      this.setState({\n        selectedUserId: id,\n      });\n    }\n  };\n\n  clearUserId = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={selectedUserId}\n            onChangeUser={this.changeUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} clearUserId={this.clearUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}